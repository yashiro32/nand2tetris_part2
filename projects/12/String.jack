// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array characters;
    field int maxLen;
    field int len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLen = maxLength;
        let len = 0;

        let characters = Array.new(maxLength);

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do characters.dispose();

        do Memory.deAlloc(this);

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return characters[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let characters[j] = c;

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxLen) {
            let characters[len] = c;
            let len = len + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        }

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, d;

        let val = 0;
        let i = 0;

        while(i < len) {
            let d = String.charToDigit(characters[i]);

            let val = (val * 10) + d;

            let i = i + 1;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var char c;

        let lastDigit = val - ((val / 10) * 10);
        let c = String.digitToChar(lastDigit);

        if (val < 10) {
            do appendChar(c);
        } else {
            do setInt(val / 10);
            do appendChar(c);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function boolean isDigit(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    function int charToDigit(char c) {
        return c - 48;
    }

    function char digitToChar(int val) {
        return val + 48; 
    }
}
