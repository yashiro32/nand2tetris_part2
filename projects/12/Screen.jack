// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;

    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384+16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while(i < 8192) {
            let screen[i] = 0;

            // let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mod, mask;

        let address = (y * 32) + (x / 16);
        let value = Memory.peek(16384 + address);

        let mask = twoToThe[(x - ((x / 16) * 16))];

        if (color) {
            let screen[address] = screen[address] | mask; 
        } else {
            let screen[address] = screen[address] & ~mask;
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx ,dy, diff, temp, adyMinusbdx;

        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let a = 0;
        let b = 0;
        let diff = 0;

        let dx = x2 - x1;
        let dy = y2 - y1;

        /* // Set pixels by either going up or going down following the path of the actual line.
        while((a <= dx) & (b <= dy)) { // execute the while loop if a is still less than or equal to dx and b is still less than or equal to dy.
            do Screen.drawPixel(x + a, y + b);

            // Decide if to go right, or up.
            if (diff < 0) { // b / a is the angle of the line estimate and dy / dx is the angle of the actual line.
                let a = a + 1; // Increment a by 1.
                let diff = diff + dy;
            } else {
                let b = b + 1; // Increment b by 1.
                let diff = diff - dx;
            }
        } */

        if (dy = 0) {
            // Draw horizontal line from x1 to x2.
            do Screen.drawHLine(x1, x2, y1);
        } else {
            if (dx = 0) {
                // Draw vertical line from y1 to y2.
                do Screen.drawVLine(x1, y1, y2);
            } else {
                // Draw diagonal line.
                let adyMinusbdx = 0;

                if (y1 < y2) {
                    let a = 0;
                    let b = 0;

                    // x++, y++
                    while(~(a > dx) & ~(b > dy)) {
                        do Screen.drawPixel(x1 + a, y1 + b);

                        if (adyMinusbdx > 0) {
                            let a = a + 1;
                            let adyMinusbdx = adyMinusbdx - dx;
                        } else {
                            let b = b + 1;
                            let adyMinusbdx = adyMinusbdx + dy;
                        }
                    }
                } else {
                    // x++, y--
                    while(~(a > dx) & ~(b < dy)) {
                        do Screen.drawPixel(x1 + a, y1 - b);

                        if (adyMinusbdx > 0) {
                            let a = a + 1;
                            let adyMinusbdx = adyMinusbdx - dx;
                        } else {
                            let b = b + 1;
                            let adyMinusbdx = adyMinusbdx + dy;
                        }
                    }
                }
            } 
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;

        let y = y1;

        while(~(y > y2)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int hypo;

        let dy = -r;

        while(~(dy > r)) {
            let hypo = Math.sqrt((r * r) - (dy * dy));

            // do Screen.drawLine(x - hypo, y + dy, x + hypo, y + dy); // Set a the pixels of a filled circle.
            do Screen.drawPixel(x - hypo, y + dy); // Set the pixel on the left of the outline of a unfilled circle.
            do Screen.drawPixel(x + hypo, y + dy); // Set the pixel on the right of the outline of a unfilled circle.

            let dy = dy + 1;
        }

        return;
    }

    // Draw horizontal line.
    function void drawHLine(int x1, int x2, int y) {
        var int temp;

        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        while(~(x2 < x1)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }

        return;
    }

    // Draw vertical line.
    function void drawVLine(int x, int y1, int y2) {
        var int temp;

        if (y1 > y2) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        while (~(y2 < y1)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }

        return;
    }
}
